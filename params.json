{"name":"node-cache","tagline":"a simple in memory node internal caching module","body":"[![Build Status](https://secure.travis-ci.org/tcs-de/nodecache.svg?branch=master)](http://travis-ci.org/tcs-de/nodecache)\r\n[![Build Status](https://david-dm.org/tcs-de/nodecache.svg)](https://david-dm.org/tcs-de/nodecache)\r\n[![NPM version](https://badge.fury.io/js/node-cache.svg)](http://badge.fury.io/js/node-cache)\r\n\r\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/tcs-de/nodecache?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\r\n\r\n[![NPM](https://nodei.co/npm/node-cache.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/node-cache/)\r\n\r\n# Simple and fast NodeJS internal caching.\r\n\r\nA simple caching module that has `set`, `get` and `delete` methods and works a little bit like memcached.\r\nKeys can have a timeout after which they expire and are cleaned from the cache.  \r\nAll keys are stored in a single object so the practical limit is at around 1m keys.\r\n\r\n# Install\r\n\r\n```bash\r\n  npm install node-cache\r\n```\r\n\r\nOr just require the `node_cache.js` file to get the superclass\r\n\r\n# Examples:\r\n\r\n## Initialize (INIT):\r\n\r\n```js\r\nvar NodeCache = require( \"node-cache\" );\r\nvar myCache = new NodeCache();\r\n```\r\n\r\n### Options\r\n\r\n- `stdTTL`: *(default: `0`)* the standard ttl as number in seconds for every generated cache element.  \r\n`0` = unlimited\r\n- `checkperiod`: *(default: `600`)* The period in seconds, as a number, used for the automatic delete check interval.  \r\n`0` = no periodic check.\r\n- `errorOnMissing`: *(default: `false`)* en/disable throwing or passing an error to the callback if attempting to `.get` a missing or expired value.\r\n- `useClones`: *(default: `true`)* en/disable cloning of variables. If `true` you'll get a copy of the cached variable. If `false` you'll save and get just the reference.  \r\n**Note:** `true` is recommended, because it'll behave like a server-based caching. You should set `false` if you want to save complex variable types like functions, promises, regexp, ...\r\n\r\n```js\r\nvar NodeCache = require( \"node-cache\" );\r\nvar myCache = new NodeCache( { stdTTL: 100, checkperiod: 120 } );\r\n```\r\n\r\n## Store a key (SET):\r\n\r\n`myCache.set( key, val, [ ttl ], [callback] )`\r\n\r\nSets a `key` `value` pair. It is possible to define a `ttl` (in seconds).  \r\nReturns `true` on success.\r\n\r\n```js\r\nobj = { my: \"Special\", variable: 42 };\r\nmyCache.set( \"myKey\", obj, function( err, success ){\r\n  if( !err && success ){\r\n    console.log( success );\r\n    // true\r\n    // ... do something ...\r\n  }\r\n});\r\n```\r\n\r\n**Since `1.0.0`**:  \r\nCallback is now optional. You can also use synchronous syntax.\r\n\r\n```js\r\nobj = { my: \"Special\", variable: 42 };\r\nsuccess = myCache.set( \"myKey\", obj, 10000 );\r\n// true\r\n```\r\n\r\n\r\n## Retrieve a key (GET):\r\n\r\n`myCache.get( key, [callback] )`\r\n\r\nGets a saved value from the cache.\r\nReturns a `undefined` if not found or expired.\r\nIf the value was found it returns an object with the `key` `value` pair.\r\n\r\n```js\r\nmyCache.get( \"myKey\", function( err, value ){\r\n  if( !err ){\r\n    if(value == undefined){\r\n      // key not found\r\n    }else{\r\n      console.log( value );\r\n      //{ my: \"Special\", variable: 42 }\r\n      // ... do something ...\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n**Since `1.0.0`**:  \r\nCallback is now optional. You can also use synchronous syntax.\r\n\r\n```js\r\nvalue = myCache.get( \"myKey\" );\r\nif ( value == undefined ){\r\n  // handle miss!\r\n}\r\n// { my: \"Special\", variable: 42 }\r\n```\r\n\r\n**Since `2.0.0`**:  \r\n\r\nThe return format changed to a simple value and a `ENOTFOUND` error if not found *( as `callback( err )` or on sync call as result instance of `Error` )*.\r\n\r\n**Since `2.1.0`**: \r\n\r\nThe return format changed to a simple value, but a due to discussion in #11 a miss shouldn't return an error.\r\nSo after 2.1.0 a miss returns `undefined`.\r\n\r\n**Since `3.1.0`**\r\n`errorOnMissing` option added\r\n\r\n```js\r\ntry{\r\n    value = myCache.get( \"not-existing-key\", true );\r\n} catch( err ){\r\n    // ENOTFOUND: Key `not-existing-key` not found\r\n}\r\n```\r\n\r\n## Get multiple keys (MGET):\r\n\r\n`myCache.mget( [ key1, key2, ... ,keyn ], [callback] )`\r\n\r\nGets multiple saved values from the cache.\r\nReturns an empty object `{}` if not found or expired.\r\nIf the value was found it returns an object with the `key` `value` pair.\r\n\r\n```js\r\nmyCache.mget( [ \"myKeyA\", \"myKeyB\" ], function( err, value ){\r\n  if( !err ){\r\n    console.log( value );\r\n    /*\r\n      {\r\n        \"myKeyA\": { my: \"Special\", variable: 123 },\r\n        \"myKeyB\": { the: \"Glory\", answer: 42 }\r\n      }\r\n    */\r\n    // ... do something ...\r\n  }\r\n});\r\n```\r\n\r\n**Since `1.0.0`**:  \r\nCallback is now optional. You can also use synchronous syntax.\r\n\r\n```js\r\nvalue = myCache.mget( [ \"myKeyA\", \"myKeyB\" ] );\r\n/*\r\n  {\r\n    \"myKeyA\": { my: \"Special\", variable: 123 },\r\n    \"myKeyB\": { the: \"Glory\", answer: 42 }\r\n  }\r\n*/\r\n```\r\n\r\n**Since `2.0.0`**:  \r\n\r\nThe method for mget changed from `.get( [ \"a\", \"b\" ] )` to `.mget( [ \"a\", \"b\" ] )`\r\n\r\n## Delete a key (DEL):\r\n\r\n`myCache.del( key, [callback] )`\r\n\r\nDelete a key. Returns the number of deleted entries. A delete will never fail.\r\n\r\n```\r\nmyCache.del( \"myKey\", function( err, count ){\r\n  if( !err ){\r\n    console.log( count ); // 1\r\n    // ... do something ...\r\n  }\r\n});\r\n```\r\n\r\n**Since `1.0.0`**:  \r\nCallback is now optional. You can also use synchronous syntax.\r\n\r\n```js\r\nvalue = myCache.del( \"A\" );\r\n// 1\r\n```\r\n\r\n## Delete multiple keys (MDEL):\r\n\r\n`myCache.del( [ key1, key2, ... ,keyn ], [callback] )`\r\n\r\nDelete multiple keys. Returns the number of deleted entries. A delete will never fail.\r\n\r\n```js\r\nmyCache.del( [ \"myKeyA\", \"myKeyB\" ], function( err, count ){\r\n  if( !err ){\r\n    console.log( count ); // 2\r\n    // ... do something ...\r\n  }\r\n});\r\n```\r\n\r\n**Since `1.0.0`**:  \r\nCallback is now optional. You can also use synchronous syntax.\r\n\r\n```js\r\nvalue = myCache.del( \"A\" );\r\n// 1\r\n\r\nvalue = myCache.del( [ \"B\", \"C\" ] );\r\n// 2\r\n\r\nvalue = myCache.del( [ \"A\", \"B\", \"C\", \"D\" ] );\r\n// 1 - because A, B and C not exists\r\n```\r\n\r\n## Change TTL (TTL):\r\n\r\n`myCache.ttl( key, ttl, [callback] )`\r\n\r\nRedefine the ttl of a key. Returns true if the key has been found and changed. Otherwise returns false.  \r\nIf the ttl-argument isn't passed the default-TTL will be used.\r\n\r\n```js\r\nmyCache = new NodeCache( { stdTTL: 100 } )\r\nmyCache.ttl( \"existendKey\", 100, function( err, changed ){\r\n  if( !err ){\r\n    console.log( changed ); // true\r\n    // ... do something ...\r\n  }\r\n});\r\n\r\nmyCache.ttl( \"missingKey\", 100, function( err, changed ){\r\n  if( !err ){\r\n    console.log( changed ); // false\r\n    // ... do something ...\r\n  }\r\n});\r\n\r\nmyCache.ttl( \"existendKey\", function( err, changed ){\r\n  if( !err ){\r\n    console.log( changed ); // true\r\n    // ... do something ...\r\n  }\r\n});\r\n```\r\n\r\n**Since `1.0.0`**:  \r\nCallback is now optional. You can also use synchronous syntax.\r\n\r\n```js\r\nvalue = myCache.ttl( \"existendKey\", 100 );\r\n// true\r\n```\r\n\r\n## List keys (KEYS)\r\n\r\n`myCache.keys( [callback] )`\r\n\r\nReturns an array of all existing keys.  \r\n\r\n```js\r\n// async\r\nmyCache.keys( function( err, mykeys ){\r\n  if( !err ){\r\n    console.log( mykeys );\r\n   // [ \"all\", \"my\", \"keys\", \"foo\", \"bar\" ]\r\n  }\r\n});\r\n\r\n// sync\r\nmykeys = myCache.keys();\r\n\r\nconsole.log( mykeys );\r\n// [ \"all\", \"my\", \"keys\", \"foo\", \"bar\" ]\r\n\r\n```\r\n\r\n## Statistics (STATS):\r\n\r\n`myCache.getStats()`\r\n\r\nReturns the statistics.  \r\n\r\n```js\r\nmyCache.getStats();\r\n  /*\r\n    {\r\n      keys: 0,    // global key count\r\n      hits: 0,    // global hit count\r\n      misses: 0,  // global miss count\r\n      ksize: 0,   // global key size count\r\n      vsize: 0    // global value size count\r\n    }\r\n  */\r\n```\r\n\r\n## Flush all data (FLUSH):\r\n\r\n`myCache.flushAll()`\r\n\r\nFlush all data.  \r\n\r\n```js\r\nmyCache.flushAll();\r\nmyCache.getStats();\r\n  /*\r\n    {\r\n      keys: 0,    // global key count\r\n      hits: 0,    // global hit count\r\n      misses: 0,  // global miss count\r\n      ksize: 0,   // global key size count\r\n      vsize: 0    // global value size count\r\n    }\r\n  */\r\n```\r\n\r\n## Close the cache:\r\n\r\n`myCache.close()`\r\n\r\nThis will clear the interval timeout which is set on check period option.\r\n\r\n```js\r\nmyCache.close();\r\n```\r\n\r\n# Events\r\n\r\n## set\r\n\r\nFired when a key has been added or changed.\r\nYou will get the `key` and the `value` as callback argument.\r\n\r\n```js\r\nmyCache.on( \"set\", function( key, value ){\r\n\t// ... do something ...  \r\n});\r\n```\r\n\r\n## del\r\n\r\nFired when a key has been removed manually or due to expiry.\r\nYou will get the `key` and the deleted `value` as callback arguments.\r\n\r\n```js\r\nmyCache.on( \"del\", function( key, value ){\r\n\t// ... do something ...  \r\n});\r\n```\r\n\r\n## expired\r\n\r\nFired when a key expires.\r\nYou will get the `key` and `value` as callback argument.\r\n\r\n```js\r\nmyCache.on( \"expired\", function( key, value ){\r\n\t// ... do something ...  \r\n});\r\n```\r\n\r\n## flush\r\n\r\nFired when the cache has been flushed.\r\n\r\n```js\r\nmyCache.on( \"flush\", function(){\r\n\t// ... do something ...  \r\n});\r\n```\r\n\r\n\r\n## Breaking changes \r\n\r\n### version `2.x`\r\n\r\nDue to the [Issue #11](https://github.com/tcs-de/nodecache/issues/11) the return format of the `.get()` method has been changed!\r\n\r\nInstead of returning an object with the key `{ \"myKey\": \"myValue\" }` it returns the value itself `\"myValue\"`.\r\n\r\n### version `3.x`\r\n\r\nDue to the [Issue #30](https://github.com/tcs-de/nodecache/issues/30) and [Issue #27](https://github.com/tcs-de/nodecache/issues/27) variables will now be cloned.  \r\nThis chould break your code, because for some variable types ( e.g. Promise ) its not possible to clone them.  \r\nYou can disable the cloning by setting the option `useClones: false`. In this case it's compatible with version `2.x`.\r\n\r\n## Benchmarks\r\n\r\n### Version 1.1.x\r\n\r\nAfter adding io.js to the travis test here are the benchmark results for set and get of 100000 elements.\r\nBut be careful with this results, because it has been executed on travis machines, so it is not guaranteed, that it was executed on similar hardware.\r\n\r\n**node.js `0.10.36`**  \r\nSET: `324`ms ( `3.24`µs per item )  \r\nGET: `7956`ms ( `79.56`µs per item )   \r\n\r\n**node.js `0.12.0`**  \r\nSET: `432`ms ( `4.32`µs per item )  \r\nGET: `42767`ms ( `427.67`µs per item )   \r\n\r\n**io.js `v1.1.0`**  \r\nSET: `510`ms ( `5.1`µs per item )  \r\nGET: `1535`ms ( `15.35`µs per item )   \r\n\r\n### Version 2.0.x\r\n\r\nAgain the same benchmarks by travis with version 2.0\r\n\r\n**node.js `0.6.21`**  \r\nSET: `786`ms ( `7.86`µs per item )  \r\nGET: `56`ms ( `0.56`µs per item )   \r\n\r\n**node.js `0.10.36`**  \r\nSET: `353`ms ( `3.53`µs per item )\r\nGET: `41`ms ( `0.41`µs per item )   \r\n\r\n**node.js `0.12.2`**  \r\nSET: `327`ms ( `3.27`µs per item )  \r\nGET: `32`ms ( `0.32`µs per item )   \r\n\r\n**io.js `v1.7.1`**  \r\nSET: `238`ms ( `2.38`µs per item )  \r\nGET: `34`ms ( `0.34`µs per item )  \r\n\r\n> As you can see the version 2.x will increase the GET performance up to 200x in node 0.10.x.\r\nThis is possible because the memory allocation for the object returned by 1.x is very expensive.\r\n\r\n### Version 3.0.x \r\n\r\n*see [travis results](https://travis-ci.org/tcs-de/nodecache/builds/64560503)*\r\n\r\n**node.js `0.6.21`**  \r\nSET: `786`ms ( `7.24`µs per item )  \r\nGET: `56`ms ( `1.14`µs per item )   \r\n\r\n**node.js `0.10.38`**  \r\nSET: `353`ms ( `5.41`µs per item )\r\nGET: `41`ms ( `1.23`µs per item )   \r\n\r\n**node.js `0.12.4`**  \r\nSET: `327`ms ( `4.63`µs per item )  \r\nGET: `32`ms ( `0.60`µs per item )   \r\n\r\n**io.js `v2.1.0`**  \r\nSET: `238`ms ( `4.06`µs per item )  \r\nGET: `34`ms ( `0.67`µs per item ) \r\n\r\n> until the version 3.0.x the object cloning is included, so we lost a little bit of the performance\r\n\r\n### Version 3.1.x \r\n\r\n**node.js `v0.10.41`**  \r\nSET: `305ms`  ( `3.05µs` per item )  \r\nGET: `104ms`  ( `1.04µs` per item )\r\n\r\n**node.js `v0.12.9`**  \r\nSET: `337ms`  ( `3.37µs` per item )  \r\nGET: `167ms`  ( `1.67µs` per item )\r\n\r\n**node.js `v4.2.6`**  \r\nSET: `356ms`  ( `3.56µs` per item )  \r\nGET: `83ms`  ( `0.83µs` per item )\r\n\r\n## Release History\r\n|Version|Date|Description|\r\n|:--:|:--:|:--|\r\n|3.1.0|2016-01-29|Added option `errorOnMissing` to throw/callback an error o a miss during a `.get( \"key\" )`. Thanks to [David Godfrey](https://github.com/david-byng) for the pull [#45](https://github.com/tcs-de/nodecache/pull/45). Added docker files and a script to run test on different node versions locally|\r\n|3.0.1|2016-01-13|Added `.unref()` to the checkTimeout so until node `0.10` it's not necessary to call `.close()` when your script is done. Thanks to [Doug Moscrop](https://github.com/dougmoscrop) for the pull [#44](https://github.com/tcs-de/nodecache/pull/44).|\r\n|3.0.0|2015-05-29|Return a cloned version of the cached element and save a cloned version of a variable. This can be disabled by setting the option `useClones:false`. (Thanks for #27 to [cheshirecatalyst](https://github.com/cheshirecatalyst) and for #30 to [Matthieu Sieben](https://github.com/matthieusieben))|\r\n|~~2.2.0~~|~~2015-05-27~~|REVOKED VERSION, because of conficts. See [Issue #30](https://github.com/tcs-de/nodecache/issues/30). So `2.2.0` is now `3.0.0`|\r\n|2.1.1|2015-04-17|Passed old value to the `del` event. Thanks to [Qix](https://github.com/qix) for the pull.|\r\n|2.1.0|2015-04-17|Changed get miss to return `undefined` instead of an error. Thanks to all [#11](https://github.com/tcs-de/nodecache/issues/11) contributors |\r\n|2.0.1|2015-04-17|Added close function (Thanks to [ownagedj](https://github.com/ownagedj)). Changed the development environment to use grunt.|\r\n|2.0.0|2015-01-05|changed return format of `.get()` with a error return on a miss and added the `.mget()` method. *Side effect: Performance of .get() up to 330 times faster!*|\r\n|1.1.0|2015-01-05|added `.keys()` method to list all existing keys|\r\n|1.0.3|2014-11-07|fix for setting numeric values. Thanks to [kaspars](https://github.com/kaspars) + optimized key ckeck.|\r\n|1.0.2|2014-09-17|Small change for better ttl handling|\r\n|1.0.1|2014-05-22|Readme typos. Thanks to [mjschranz](https://github.com/mjschranz)|\r\n|1.0.0|2014-04-09|Made `callback`s optional. So it's now possible to use a syncron syntax. The old syntax should also work well. Push : Bugfix for the value `0`|\r\n|0.4.1|2013-10-02|Added the value to `expired` event|\r\n|0.4.0|2013-10-02|Added nodecache events|\r\n|0.3.2|2012-05-31|Added Travis tests|\r\n\r\n[![NPM](https://nodei.co/npm-dl/node-cache.png?months=6)](https://nodei.co/npm/node-cache/)\r\n\r\n## Other projects\r\n\r\n|Name|Description|\r\n|:--|:--|\r\n|[**rsmq**](https://github.com/smrchy/rsmq)|A really simple message queue based on redis|\r\n|[**redis-heartbeat**](https://github.com/mpneuried/redis-heartbeat)|Pulse a heartbeat to redis. This can be used to detach or attach servers to nginx or similar problems.|\r\n|[**systemhealth**](https://github.com/mpneuried/systemhealth)|Node module to run simple custom checks for your machine or it's connections. It will use [redis-heartbeat](https://github.com/mpneuried/redis-heartbeat) to send the current state to redis.|\r\n|[**rsmq-cli**](https://github.com/mpneuried/rsmq-cli)|a terminal client for rsmq|\r\n|[**rest-rsmq**](https://github.com/smrchy/rest-rsmq)|REST interface for.|\r\n|[**redis-sessions**](https://github.com/smrchy/redis-sessions)|An advanced session store for NodeJS and Redis|\r\n|[**connect-redis-sessions**](https://github.com/mpneuried/connect-redis-sessions)|A connect or express middleware to simply use the [redis sessions](https://github.com/smrchy/redis-sessions). With [redis sessions](https://github.com/smrchy/redis-sessions) you can handle multiple sessions per user_id.|\r\n|[**redis-notifications**](https://github.com/mpneuried/redis-notifications)|A redis based notification engine. It implements the rsmq-worker to safely create notifications and recurring reports.|\r\n|[**nsq-logger**](https://github.com/mpneuried/nsq-logger)|Nsq service to read messages from all topics listed within a list of nsqlookupd services.|\r\n|[**nsq-topics**](https://github.com/mpneuried/nsq-topics)|Nsq helper to poll a nsqlookupd service for all it's topics and mirror it locally.|\r\n|[**nsq-nodes**](https://github.com/mpneuried/nsq-nodes)|Nsq helper to poll a nsqlookupd service for all it's nodes and mirror it locally.|\r\n|[**nsq-watch**](https://github.com/mpneuried/nsq-watch)|Watch one or many topics for unprocessed messages.|\r\n|[**hyperrequest**](https://github.com/mpneuried/hyperrequest)|A wrapper around [hyperquest](https://github.com/substack/hyperquest) to handle the results|\r\n|[**task-queue-worker**](https://github.com/smrchy/task-queue-worker)|A powerful tool for background processing of tasks that are run by making standard http requests\r\n|[**soyer**](https://github.com/mpneuried/soyer)|Soyer is small lib for server side use of Google Closure Templates with node.js.|\r\n|[**grunt-soy-compile**](https://github.com/mpneuried/grunt-soy-compile)|Compile Goggle Closure Templates ( SOY ) templates including the handling of XLIFF language files.|\r\n|[**backlunr**](https://github.com/mpneuried/backlunr)|A solution to bring Backbone Collections together with the browser fulltext search engine Lunr.js|\r\n|[**domel**](https://github.com/mpneuried/domel)|A simple dom helper if you want to get rid of jQuery|\r\n|[**obj-schema**](https://github.com/mpneuried/obj-schema)|Simple module to validate an object by a predefined schema|\r\n\r\n# The MIT License (MIT)\r\n\r\nCopyright © 2013 Mathias Peter, http://www.tcs.de\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"UA-32491479-1","note":"Don't delete this file! It's used internally to help with page regeneration."}